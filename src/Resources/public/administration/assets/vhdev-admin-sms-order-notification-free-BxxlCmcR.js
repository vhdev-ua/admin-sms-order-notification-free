const d=`{% block vhdev_twilio_validate_button %} <div class="vhdev-twilio-validate-button" style="margin-top: 20px;"> <sw-button variant="primary" :disabled="buttonDisabled" :isLoading="isLoading" @click="validateCredentials"> <sw-icon name="regular-check-circle" v-if="isValidated && !isLoading"></sw-icon> {{ $tc('vhdev-sms.validation.buttonText') }} </sw-button> <p style="margin-top: 10px; font-size: 12px; color: #52667a;"> {{ $tc('vhdev-sms.validation.buttonHelp') }} </p> </div> {% endblock %}`,{Component:c,Mixin:h}=Shopware;c.register("vhdev-twilio-validate-button",{template:d,inject:["systemConfigApiService","loginService"],mixins:[h.getByName("notification")],data(){return{isLoading:!1,isValidated:!1}},computed:{buttonDisabled(){return this.isLoading},salesChannelId(){let t=this.$parent,s=0;for(;t&&s<20;){if(t.currentSalesChannelId&&typeof t.currentSalesChannelId=="string"&&t.currentSalesChannelId!=="null")return t.currentSalesChannelId;if(t.salesChannelId&&typeof t.salesChannelId=="string"&&t.salesChannelId!=="null")return t.salesChannelId;t=t.$parent,s++}return null}},methods:{translateMessage(t,s){const n={"Twilio SID and Auth Token are not configured":"vhdev-sms.validation.messages.missingSidToken","Twilio From Number is not configured":"vhdev-sms.validation.messages.missingFromNumber","The provided phone number is not valid":"vhdev-sms.validation.messages.invalidPhoneNumber","Invalid credentials":"vhdev-sms.validation.messages.invalidCredentials","Failed to connect":"vhdev-sms.validation.messages.connectionError"};for(const[a,o]of Object.entries(n))if(t&&t.includes(a))return this.$tc(o);if(s&&s.valid){let a=this.$tc("vhdev-sms.validation.messages.credentialsValid");if(s.testSmsSent&&s.testSmsResults){const o=s.testSmsResults.filter(i=>{var e;return(e=i.result)==null?void 0:e.success}).length,l=s.testSmsResults.length;a+=" "+this.$tc("vhdev-sms.validation.messages.testSmsSent",0,{successCount:o,totalCount:l})}return s.accountName&&(a+=` (${s.accountName})`),a}return t},async validateCredentials(){var t,s;this.isLoading=!0,this.isValidated=!1;try{const n=this.salesChannelId;let a=null;try{const e=JSON.parse(localStorage.getItem("bearerAuth"));e&&e.access&&(a=e.access)}catch{}if(!a){const e=this.loginService.getBearerAuthentication();e&&e.access&&(a=e.access)}const o={"Content-Type":"application/json",Accept:"application/json"};a&&(o.Authorization=`Bearer ${a}`);const l=await fetch("/api/_action/vhdev-sms/validate-twilio",{method:"POST",headers:o,credentials:"include",body:JSON.stringify({salesChannelId:n})});if(!l.ok){const e=await l.json().catch(()=>({})),r=((s=(t=e.errors)==null?void 0:t[0])==null?void 0:s.detail)||e.message;throw new Error(this.translateMessage(r,e))}const i=await l.json();if(i.valid){this.isValidated=!0;const e=this.translateMessage(i.message,i);this.createNotificationSuccess({title:this.$tc("vhdev-sms.validation.successTitle"),message:e})}else{const e=this.translateMessage(i.message,i);this.createNotificationError({title:this.$tc("vhdev-sms.validation.errorTitle"),message:e||this.$tc("vhdev-sms.validation.errorMessage")})}}catch(n){console.error("Twilio validation error:",n),this.createNotificationError({title:this.$tc("vhdev-sms.validation.errorTitle"),message:n.message||this.$tc("vhdev-sms.validation.errorDefault")})}finally{this.isLoading=!1}}}});
//# sourceMappingURL=vhdev-admin-sms-order-notification-free-BxxlCmcR.js.map
