{"version":3,"file":"vhdev-admin-sms-order-notification-free-BxxlCmcR.js","sources":["../../../app/administration/src/component/vhdev-twilio-validate-button/vhdev-twilio-validate-button.html.twig","../../../app/administration/src/component/vhdev-twilio-validate-button/index.js"],"sourcesContent":["{% block vhdev_twilio_validate_button %}\n    <div class=\"vhdev-twilio-validate-button\" style=\"margin-top: 20px;\">\n        <sw-button\n            variant=\"primary\"\n            :disabled=\"buttonDisabled\"\n            :isLoading=\"isLoading\"\n            @click=\"validateCredentials\">\n            <sw-icon name=\"regular-check-circle\" v-if=\"isValidated && !isLoading\"></sw-icon>\n            {{ $tc('vhdev-sms.validation.buttonText') }}\n        </sw-button>\n        <p style=\"margin-top: 10px; font-size: 12px; color: #52667a;\">\n            {{ $tc('vhdev-sms.validation.buttonHelp') }}\n        </p>\n    </div>\n{% endblock %}\n","import template from './vhdev-twilio-validate-button.html.twig';\n\nconst { Component, Mixin } = Shopware;\n\nComponent.register('vhdev-twilio-validate-button', {\n    template,\n\n    inject: ['systemConfigApiService', 'loginService'],\n\n    mixins: [\n        Mixin.getByName('notification')\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isValidated: false\n        };\n    },\n\n    computed: {\n        buttonDisabled() {\n            return this.isLoading;\n        },\n\n        salesChannelId() {\n            // Traverse up the component tree to sw-system-config\n            let parent = this.$parent;\n            let level = 0;\n            \n            while (parent && level < 20) {\n                // Search for currentSalesChannelId or salesChannelId\n                if (parent.currentSalesChannelId) {\n                    if (typeof parent.currentSalesChannelId === 'string' && parent.currentSalesChannelId !== 'null') {\n                        return parent.currentSalesChannelId;\n                    }\n                }\n                \n                if (parent.salesChannelId) {\n                    if (typeof parent.salesChannelId === 'string' && parent.salesChannelId !== 'null') {\n                        return parent.salesChannelId;\n                    }\n                }\n                \n                parent = parent.$parent;\n                level++;\n            }\n            \n            return null;\n        }\n    },\n\n    methods: {\n        translateMessage(backendMessage, result) {\n            // Map backend messages to translation keys\n            const messageMap = {\n                'Twilio SID and Auth Token are not configured': 'vhdev-sms.validation.messages.missingSidToken',\n                'Twilio From Number is not configured': 'vhdev-sms.validation.messages.missingFromNumber',\n                'The provided phone number is not valid': 'vhdev-sms.validation.messages.invalidPhoneNumber',\n                'Invalid credentials': 'vhdev-sms.validation.messages.invalidCredentials',\n                'Failed to connect': 'vhdev-sms.validation.messages.connectionError'\n            };\n\n            // Check if backend message matches any known pattern\n            for (const [pattern, translationKey] of Object.entries(messageMap)) {\n                if (backendMessage && backendMessage.includes(pattern)) {\n                    return this.$tc(translationKey);\n                }\n            }\n\n            // If it's a success message, build translated version\n            if (result && result.valid) {\n                let message = this.$tc('vhdev-sms.validation.messages.credentialsValid');\n                \n                if (result.testSmsSent && result.testSmsResults) {\n                    const successCount = result.testSmsResults.filter(r => r.result?.success).length;\n                    const totalCount = result.testSmsResults.length;\n                    \n                    message += ' ' + this.$tc('vhdev-sms.validation.messages.testSmsSent', 0, {\n                        successCount: successCount,\n                        totalCount: totalCount\n                    });\n                }\n                \n                if (result.accountName) {\n                    message += ` (${result.accountName})`;\n                }\n                \n                return message;\n            }\n\n            // Return original message if no translation found\n            return backendMessage;\n        },\n\n        async validateCredentials() {\n            this.isLoading = true;\n            this.isValidated = false;\n\n            try {\n                const salesChannelId = this.salesChannelId;\n\n                // Get bearer token\n                let bearerToken = null;\n                try {\n                    const bearerAuth = JSON.parse(localStorage.getItem('bearerAuth'));\n                    if (bearerAuth && bearerAuth.access) {\n                        bearerToken = bearerAuth.access;\n                    }\n                } catch (e) {\n                    // Fallback to loginService\n                }\n\n                if (!bearerToken) {\n                    const auth = this.loginService.getBearerAuthentication();\n                    if (auth && auth.access) {\n                        bearerToken = auth.access;\n                    }\n                }\n\n                const headers = {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                };\n\n                if (bearerToken) {\n                    headers['Authorization'] = `Bearer ${bearerToken}`;\n                }\n\n                const response = await fetch('/api/_action/vhdev-sms/validate-twilio', {\n                    method: 'POST',\n                    headers: headers,\n                    credentials: 'include',\n                    body: JSON.stringify({\n                        salesChannelId: salesChannelId\n                    })\n                });\n\n                if (!response.ok) {\n                    const errorData = await response.json().catch(() => ({}));\n                    const errorMessage = errorData.errors?.[0]?.detail || errorData.message;\n                    \n                    throw new Error(this.translateMessage(errorMessage, errorData));\n                }\n\n                const result = await response.json();\n\n                if (result.valid) {\n                    this.isValidated = true;\n                    const translatedMessage = this.translateMessage(result.message, result);\n                    \n                    this.createNotificationSuccess({\n                        title: this.$tc('vhdev-sms.validation.successTitle'),\n                        message: translatedMessage\n                    });\n                } else {\n                    const translatedMessage = this.translateMessage(result.message, result);\n                    \n                    this.createNotificationError({\n                        title: this.$tc('vhdev-sms.validation.errorTitle'),\n                        message: translatedMessage || this.$tc('vhdev-sms.validation.errorMessage')\n                    });\n                }\n            } catch (error) {\n                console.error('Twilio validation error:', error);\n                \n                this.createNotificationError({\n                    title: this.$tc('vhdev-sms.validation.errorTitle'),\n                    message: error.message || this.$tc('vhdev-sms.validation.errorDefault')\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        }\n    }\n});\n"],"names":["template","Component","Mixin","parent","level","backendMessage","result","messageMap","pattern","translationKey","message","successCount","r","_a","totalCount","_b","salesChannelId","bearerToken","bearerAuth","auth","headers","response","errorData","errorMessage","translatedMessage","error"],"mappings":"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"}